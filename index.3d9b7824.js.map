{"mappings":"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","sources":["<anon>","src/ts/index.ts","src/ts/Board.ts","src/ts/Elements.ts","src/ts/Game.ts","src/ts/Player.ts"],"sourcesContent":["function $0407224c6b4a60f1$export$2e2bcd8739ae039() {\n    const gameBoard = [\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\"\n    ];\n    const getCell = (index)=>{\n        return document.querySelector(`.cell[data-cell-index='${index}']`);\n    };\n    const isFilled = ()=>!gameBoard.includes(\"empty\");\n    const drawBoard = ()=>{\n        gameBoard.forEach((marking, index)=>{\n            if (marking === \"o\") getCell(index).classList.add(\"o\");\n            else if (marking === \"x\") getCell(index).classList.add(\"x\");\n            else if (marking === \"empty\") {\n                getCell(index).classList.remove(\"x\");\n                getCell(index).classList.remove(\"o\");\n            }\n        });\n    };\n    const isWinner = (symbol)=>{\n        const check = (index)=>gameBoard[index] === symbol;\n        const firstColCheck = check(0) && check(3) && check(6);\n        const secondColCheck = check(1) && check(4) && check(7);\n        const thirdColCheck = check(2) && check(5) && check(8);\n        const firstRowCheck = check(0) && check(1) && check(2);\n        const secondRowCheck = check(3) && check(4) && check(5);\n        const thirdRowCheck = check(6) && check(7) && check(8);\n        const firstDiagCheck = check(0) && check(4) && check(8);\n        const secondDiagCheck = check(2) && check(4) && check(6);\n        return firstColCheck || secondColCheck || thirdColCheck || firstRowCheck || secondRowCheck || thirdRowCheck || firstDiagCheck || secondDiagCheck;\n    };\n    const editBoard = (index, symbol)=>{\n        gameBoard[index] = symbol;\n        drawBoard();\n    };\n    const reset = ()=>{\n        gameBoard.fill(\"empty\");\n        drawBoard();\n    };\n    return {\n        isWinner: isWinner,\n        isFilled: isFilled,\n        editBoard: editBoard,\n        reset: reset\n    };\n}\n\n\nfunction $ea6e99e5431089c0$var$querySelectorWithError(query) {\n    const queryResult = document.querySelectorAll(query);\n    if (queryResult.length > 1) throw new Error(\"Multiple elements detected\");\n    if (queryResult.length < 1) throw new Error(\"No elements detected, is the js file deferred?\");\n    return queryResult[0];\n}\nconst $ea6e99e5431089c0$export$bb2b5c3157a19234 = $ea6e99e5431089c0$var$querySelectorWithError(\"#welcome-screen\");\nconst $ea6e99e5431089c0$export$1324d9a85915ed99 = $ea6e99e5431089c0$var$querySelectorWithError(\"#game-elements\");\nconst $ea6e99e5431089c0$export$9207299770ddf3b1 = $ea6e99e5431089c0$var$querySelectorWithError(\"#name-submission\");\nconst $ea6e99e5431089c0$export$82e711826dc223fa = $ea6e99e5431089c0$var$querySelectorWithError(\"#winner-text\");\nconst $ea6e99e5431089c0$export$ee83f511b7056644 = $ea6e99e5431089c0$var$querySelectorWithError(\"#start-game\");\nconst $ea6e99e5431089c0$export$4179bfecf50f4fc2 = $ea6e99e5431089c0$var$querySelectorWithError(\"#welcome-screen__name-input__o\");\nconst $ea6e99e5431089c0$export$5bea51c9b1e14965 = $ea6e99e5431089c0$var$querySelectorWithError(\"#welcome-screen__name-input__x\");\nconst $ea6e99e5431089c0$export$6beee6598a67c5f8 = $ea6e99e5431089c0$var$querySelectorWithError(\"#welcome-screen__name-errors\");\nconst $ea6e99e5431089c0$export$ee3b447756b3ac63 = $ea6e99e5431089c0$var$querySelectorWithError(\"#current-player-turn\");\n\n\n\nfunction $48f6c7b0f9ee5bd6$export$2e2bcd8739ae039(oPlayer, xPlayer, board) {\n    const isGameDone = ()=>board.isWinner(oPlayer.symbol) || board.isWinner(xPlayer.symbol) || board.isFilled();\n    async function playerTurn(player) {\n        (0, $ea6e99e5431089c0$export$ee3b447756b3ac63).textContent = `It's your turn, ${player.name}`;\n        await player.startTurn();\n        (0, $ea6e99e5431089c0$export$ee3b447756b3ac63).textContent = \"\";\n    }\n    const start = async ()=>{\n        while(true){\n            await playerTurn(oPlayer);\n            if (isGameDone()) break;\n            await playerTurn(xPlayer);\n            if (isGameDone()) break;\n        }\n        (0, $ea6e99e5431089c0$export$82e711826dc223fa).style.display = \"block\";\n        if (board.isWinner(oPlayer.symbol)) (0, $ea6e99e5431089c0$export$82e711826dc223fa).innerHTML = `${oPlayer.name} has won`;\n        else if (board.isWinner(xPlayer.symbol)) (0, $ea6e99e5431089c0$export$82e711826dc223fa).innerHTML = `${xPlayer.name} has won`;\n        else if (board.isFilled()) (0, $ea6e99e5431089c0$export$82e711826dc223fa).innerHTML = \"TIE!\";\n        board.reset();\n        document.querySelector(\"#start-game\").style.opacity = \"1\";\n    };\n    return {\n        start: start\n    };\n}\n\n\nfunction $b1962aabaad09aa2$export$2e2bcd8739ae039(symbol, name, board) {\n    const getEmptyCellArray = ()=>[\n            ...document.querySelectorAll(\".cell:not(.x):not(.o)\")\n        ];\n    const getAllCellsArray = ()=>[\n            ...document.querySelectorAll(\".cell\")\n        ];\n    function addClickEventToEmptyCells(clickEvent) {\n        getEmptyCellArray().forEach((cell)=>{\n            cell.addEventListener(\"click\", clickEvent);\n        });\n    }\n    function removeClickEventFromCells(clickEvent) {\n        getAllCellsArray().forEach((e)=>e.removeEventListener(\"click\", clickEvent));\n    }\n    const startTurn = async ()=>{\n        return new Promise((resolve)=>{\n            addClickEventToEmptyCells(handleCellClick);\n            function handleCellClick(event) {\n                const cell = event.target;\n                const cellIndex = cell.getAttribute(\"data-cell-index\");\n                board.editBoard(cellIndex, symbol);\n                removeClickEventFromCells(handleCellClick);\n                resolve();\n            }\n        });\n    };\n    return {\n        symbol: symbol,\n        name: name,\n        startTurn: startTurn\n    };\n}\n\n\nconst $4aa1cd84f89e5a94$var$board = (0, $0407224c6b4a60f1$export$2e2bcd8739ae039)();\nlet $4aa1cd84f89e5a94$var$game;\nfunction $4aa1cd84f89e5a94$var$startGame(e) {\n    $4aa1cd84f89e5a94$var$game.start();\n    (0, $ea6e99e5431089c0$export$ee83f511b7056644).style.opacity = \"0\";\n    document.querySelector(\"#winner-text\").textContent = \"\";\n}\nfunction $4aa1cd84f89e5a94$var$intializeGame() {\n    const inputsEmpty = (0, $ea6e99e5431089c0$export$4179bfecf50f4fc2).value === \"\" || (0, $ea6e99e5431089c0$export$5bea51c9b1e14965).value === \"\";\n    if (inputsEmpty) {\n        (0, $ea6e99e5431089c0$export$6beee6598a67c5f8).textContent = \"Names need to be filled in\";\n        return;\n    }\n    $4aa1cd84f89e5a94$var$game = (0, $48f6c7b0f9ee5bd6$export$2e2bcd8739ae039)((0, $b1962aabaad09aa2$export$2e2bcd8739ae039)(\"o\", (0, $ea6e99e5431089c0$export$4179bfecf50f4fc2).value.trim(), $4aa1cd84f89e5a94$var$board), (0, $b1962aabaad09aa2$export$2e2bcd8739ae039)(\"x\", (0, $ea6e99e5431089c0$export$5bea51c9b1e14965).value.trim(), $4aa1cd84f89e5a94$var$board), $4aa1cd84f89e5a94$var$board);\n    (0, $ea6e99e5431089c0$export$bb2b5c3157a19234).style.display = \"none\";\n    (0, $ea6e99e5431089c0$export$1324d9a85915ed99).style.display = \"grid\";\n}\n(0, $ea6e99e5431089c0$export$1324d9a85915ed99).style.display = \"none\";\n(0, $ea6e99e5431089c0$export$ee83f511b7056644).addEventListener(\"click\", $4aa1cd84f89e5a94$var$startGame);\n(0, $ea6e99e5431089c0$export$9207299770ddf3b1).addEventListener(\"click\", $4aa1cd84f89e5a94$var$intializeGame);\n\n\n//# sourceMappingURL=index.3d9b7824.js.map\n","import Board from \"./Board.js\";\nimport {\n  gameElements,\n  gameStartBtn,\n  nameSubmission,\n  oInput,\n  welcomeScreen,\n  welcomeScreenNameErrors,\n  xInput\n} from \"./Elements.js\";\nimport Game from \"./Game.js\";\nimport Player from \"./Player.js\";\nconst board = Board()\n\nlet game;\n\nfunction startGame(e: Event) {\n  game.start();\n  gameStartBtn.style.opacity = \"0\";\n  (document.querySelector(\"#winner-text\") as HTMLElement).textContent = \"\";\n}\n\nfunction intializeGame() {\n  const inputsEmpty = oInput.value === '' || xInput.value === '';\n  if (inputsEmpty) {\n    welcomeScreenNameErrors.textContent = 'Names need to be filled in'\n    return\n  }\n\n  game = Game(\n    Player(\"o\", oInput.value.trim(), board),\n    Player(\"x\", xInput.value.trim(), board),\n    board\n  );\n  welcomeScreen.style.display = \"none\";\n  gameElements.style.display = \"grid\";\n\n}\n\ngameElements.style.display = \"none\";\ngameStartBtn.addEventListener(\"click\", startGame);\nnameSubmission.addEventListener(\"click\", intializeGame);\n","export default function Board() {\n  const gameBoard = [\n    \"empty\",\n    \"empty\",\n    \"empty\",\n    \"empty\",\n    \"empty\",\n    \"empty\",\n    \"empty\",\n    \"empty\",\n    \"empty\",\n  ];\n\n  const getCell = (index) => {\n    return document.querySelector(`.cell[data-cell-index='${index}']`);\n  };\n\n  const isFilled = () => !gameBoard.includes(\"empty\");\n\n  const drawBoard = () => {\n    gameBoard.forEach((marking, index) => {\n      if (marking === \"o\") {\n        getCell(index).classList.add(\"o\");\n      } else if (marking === \"x\") {\n        getCell(index).classList.add(\"x\");\n      } else if (marking === \"empty\") {\n        getCell(index).classList.remove(\"x\");\n        getCell(index).classList.remove(\"o\");\n      }\n    });\n  };\n\n  const isWinner = (symbol) => {\n    const check = (index) => gameBoard[index] === symbol;\n    const firstColCheck = check(0) && check(3) && check(6);\n    const secondColCheck = check(1) && check(4) && check(7);\n    const thirdColCheck = check(2) && check(5) && check(8);\n    const firstRowCheck = check(0) && check(1) && check(2);\n    const secondRowCheck = check(3) && check(4) && check(5);\n    const thirdRowCheck = check(6) && check(7) && check(8);\n    const firstDiagCheck = check(0) && check(4) && check(8);\n    const secondDiagCheck = check(2) && check(4) && check(6);\n    return (\n      firstColCheck ||\n      secondColCheck ||\n      thirdColCheck ||\n      firstRowCheck ||\n      secondRowCheck ||\n      thirdRowCheck ||\n      firstDiagCheck ||\n      secondDiagCheck\n    );\n  };\n\n  const editBoard = (index, symbol) => {\n    gameBoard[index] = symbol;\n    drawBoard();\n  };\n\n  const reset = () => {\n    gameBoard.fill(\"empty\");\n    drawBoard();\n  };\n\n  return { isWinner, isFilled, editBoard, reset };\n};\n\nexport type BoardType = ReturnType<typeof Board>;\n","function querySelectorWithError(query: string) {\n  const queryResult = document.querySelectorAll(query);\n\n  if (queryResult.length > 1) {\n    throw new Error(\"Multiple elements detected\")\n  }\n\n  if (queryResult.length < 1) {\n    throw new Error(\"No elements detected, is the js file deferred?\")\n  }\n\n  return queryResult[0]\n}\n\nexport const  welcomeScreen = querySelectorWithError('#welcome-screen') as HTMLElement\nexport const  gameElements = querySelectorWithError('#game-elements') as HTMLElement\nexport const  nameSubmission = querySelectorWithError('#name-submission') as HTMLElement\nexport const  winnerText = querySelectorWithError('#winner-text') as HTMLElement\nexport const  gameStartBtn = querySelectorWithError('#start-game') as HTMLElement\nexport const  oInput = querySelectorWithError(\"#welcome-screen__name-input__o\") as HTMLInputElement\nexport const  xInput = querySelectorWithError(\"#welcome-screen__name-input__x\") as HTMLInputElement\nexport const  welcomeScreenNameErrors = querySelectorWithError(\"#welcome-screen__name-errors\") as HTMLInputElement\nexport const  currentPlayerTurn = querySelectorWithError(\"#current-player-turn\") as HTMLInputElement\n","import { BoardType } from \"./Board\";\nimport { currentPlayerTurn, winnerText } from \"./Elements.js\";\nimport { PlayerType } from \"./Player\";\n\nexport default function Game(oPlayer: PlayerType, xPlayer: PlayerType, board: BoardType) {\n  const isGameDone = () =>\n    board.isWinner(oPlayer.symbol) ||\n    board.isWinner(xPlayer.symbol) ||\n    board.isFilled();\n\n  async function playerTurn(player: PlayerType) {\n    currentPlayerTurn.textContent = `It's your turn, ${player.name}`\n    await player.startTurn()\n    currentPlayerTurn.textContent = ''\n  }\n\n  const start = async () => {\n    while (true) {\n      await playerTurn(oPlayer)\n      if (isGameDone()) {\n        break;\n      }\n      await playerTurn(xPlayer)\n      if (isGameDone()) {\n        break;\n      }\n    }\n\n    winnerText.style.display = \"block\";\n    if (board.isWinner(oPlayer.symbol)) {\n      winnerText.innerHTML = `${oPlayer.name} has won`;\n    } else if (board.isWinner(xPlayer.symbol)) {\n      winnerText.innerHTML = `${xPlayer.name} has won`;\n    } else if (board.isFilled()) {\n      winnerText.innerHTML = \"TIE!\";\n    }\n    board.reset();\n    (document.querySelector(\"#start-game\") as HTMLElement).style.opacity = \"1\";\n  };\n  return { start };\n};\n","import { BoardType } from \"./Board\";\n\nexport default function Player(symbol: 'o' | 'x', name, board: BoardType) {\n  const getEmptyCellArray = () => [\n    ...document.querySelectorAll(\".cell:not(.x):not(.o)\"),\n  ];\n\n  const getAllCellsArray = () => [\n    ...document.querySelectorAll(\".cell\"),\n  ]\n\n  function addClickEventToEmptyCells(clickEvent: EventListener) {\n    getEmptyCellArray().forEach((cell) => {\n      cell.addEventListener(\"click\", clickEvent);\n    });\n  }\n\n  function removeClickEventFromCells(clickEvent: EventListener) {\n    getAllCellsArray().forEach((e) =>\n      e.removeEventListener(\"click\", clickEvent)\n    );\n  }\n\n  const startTurn = async () => {\n    return new Promise<void>((resolve) => {\n      addClickEventToEmptyCells(handleCellClick)\n\n      function handleCellClick(event: Event) {\n        const cell = event.target as HTMLElement\n        const cellIndex = cell.getAttribute(\"data-cell-index\")\n        board.editBoard(cellIndex, symbol)\n        removeClickEventFromCells(handleCellClick)\n        resolve();\n      }\n    })\n  };\n  return { symbol, name, startTurn };\n}\n\nexport type PlayerType = ReturnType<typeof Player>;\n"],"names":["$4aa1cd84f89e5a94$var$game","$ea6e99e5431089c0$var$querySelectorWithError","query","queryResult","document","querySelectorAll","length","Error","$ea6e99e5431089c0$export$bb2b5c3157a19234","$ea6e99e5431089c0$export$1324d9a85915ed99","$ea6e99e5431089c0$export$9207299770ddf3b1","$ea6e99e5431089c0$export$82e711826dc223fa","$ea6e99e5431089c0$export$ee83f511b7056644","$ea6e99e5431089c0$export$4179bfecf50f4fc2","$ea6e99e5431089c0$export$5bea51c9b1e14965","$ea6e99e5431089c0$export$6beee6598a67c5f8","$ea6e99e5431089c0$export$ee3b447756b3ac63","$b1962aabaad09aa2$export$2e2bcd8739ae039","symbol","name","board","getEmptyCellArray","getAllCellsArray","startTurn","Promise","resolve","clickEvent","handleCellClick","event","cell","target","cellIndex","getAttribute","editBoard","forEach","e","removeEventListener","addEventListener","$4aa1cd84f89e5a94$var$board","gameBoard","getCell","index","querySelector","drawBoard","marking","classList","add","remove","isWinner","check","firstColCheck","secondColCheck","thirdColCheck","firstRowCheck","secondRowCheck","thirdRowCheck","firstDiagCheck","secondDiagCheck","isFilled","includes","reset","fill","style","display","start","opacity","textContent","inputsEmpty","value","oPlayer","xPlayer","isGameDone","playerTurn","player","innerHTML","trim"],"version":3,"file":"index.3d9b7824.js.map"}